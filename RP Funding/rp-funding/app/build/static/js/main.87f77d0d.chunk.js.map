{"version":3,"sources":["stores/App/InitialState.js","stores/App/Reducers.js","stores/App/Actions.js","components/AppHeader/AppHeaderStyle.js","components/AppHeader/AppHeader.js","pages/Orders/OrderStyle.js","services/ApiService.js","pages/Orders/Orders.js","App.js","serviceWorker.js","index.js","stores/index.js"],"names":["INITIAL_STATE","loading","message","currentRoute","appReducer","state","action","type","data","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","connect","ownProps","app","dispatch","updateRoute","props","history","useHistory","classes","useStyles","AppBar","position","Toolbar","Typography","variant","className","Box","Button","color","onClick","event","route","preventDefault","push","navOnClick","style","float","window","open","width","paper","marginBottom","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","top","apiInterface","getAllOrders","axios","get","res","success","Orders","order","orderBy","selected","page","dense","rowsPerPage","then","console","log","catch","err","error","React","Component","App","Container","maxWidth","disableGutters","exact","path","component","Boolean","location","hostname","match","store","rootReducer","combineReducers","AppReducer","createStore","CreateStore","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87f77d0d.chunk.js","sourcesContent":["const INITIAL_STATE = {\r\n  loading: false,\r\n  message: null,\r\n  currentRoute: \"/\",\r\n};\r\n\r\nexport default INITIAL_STATE;\r\n","import { LOADING, ERROR, UPDATE_ROUTE } from \"./Actions\";\r\nimport INITIAL_STATE from \"./InitialState\";\r\n\r\nfunction appReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case LOADING: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        message: null,\r\n      };\r\n    }\r\n    case ERROR: {\r\n      const { message } = action.data;\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: message,\r\n      };\r\n    }\r\n    case UPDATE_ROUTE: {\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n        loading: false,\r\n        message: null,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default appReducer;\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const LOADING = \"LOADING\";\r\nexport const ERROR = \"ERROR\";\r\nexport const UPDATE_ROUTE = \"UPDATE_ROUTE\";\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function loading() {\r\n  return { type: LOADING };\r\n}\r\n\r\nexport function error(message) {\r\n  return { type: ERROR, data: { message } };\r\n}\r\n\r\nexport function updateRoute(currentRoute) {\r\n  return { type: UPDATE_ROUTE, data: { currentRoute } };\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}))\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\nimport Button from '@material-ui/core/Button'\r\nimport { updateRoute } from '../../stores/App/Actions'\r\nimport useStyles from './AppHeaderStyle'\r\n\r\nconst AppHeader = (props) => {\r\n  const history = useHistory()\r\n  const classes = useStyles()\r\n  const { currentRoute } = props\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon />\r\n        </IconButton> */}\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          RP Funding App\r\n        </Typography>\r\n        <Box className={classes.title}>\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={(event) => navOnClick(event, '/')}\r\n            variant={currentRoute === '/' ? 'outlined' : 'text'}\r\n          >\r\n            Orders\r\n          </Button>\r\n        </Box>\r\n        <Box className={classes.title}>\r\n          <Button\r\n            style={{ float: 'right' }}\r\n            color=\"inherit\"\r\n            onClick={(event) =>\r\n              window.open(\r\n                'https://github.com/edowney29/interview-assignments/tree/master/RP%20Funding/rp-funding',\r\n                '_blank'\r\n              )\r\n            }\r\n          >\r\n            GitHub\r\n          </Button>\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n\r\n  function navOnClick(event, route) {\r\n    event.preventDefault()\r\n    props.updateRoute(route)\r\n    history.push(route)\r\n  }\r\n}\r\n\r\nAppHeader.propTypes = {\r\n  currentRoute: PropTypes.string,\r\n  updateRoute: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  currentRoute: state.app.currentRoute,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    updateRoute: (currentRoute) => dispatch(updateRoute(currentRoute)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader)\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n","import axios from 'axios'\r\n\r\nconst baseApiUrl = 'localhost:8080/api'\r\n\r\nconst apiInterface = {\r\n  async getAllOrders() {\r\n    const body = {}\r\n    try {\r\n      const res = await axios.get(`${baseApiUrl}/orders`)\r\n      if (res.data.success) {\r\n        return res.data\r\n      }\r\n      throw res.data.message\r\n    } catch (err) {\r\n      throw err\r\n    }\r\n  },\r\n}\r\n\r\nexport default apiInterface\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport { updateRoute } from '../../stores/App/Actions'\r\nimport useStyles from './OrderStyle.js'\r\nimport apiInterface from '../../services/ApiService'\r\n\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   return { name, calories, fat, carbs, protein }\r\n// }\r\n\r\n// const rows = [\r\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//   createData('Donut', 452, 25.0, 51, 4.9),\r\n//   createData('Eclair', 262, 16.0, 24, 6.0),\r\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n//   createData('KitKat', 518, 26.0, 65, 7.0),\r\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\r\n//   createData('Marshmallow', 318, 0, 81, 2.0),\r\n//   createData('Nougat', 360, 19.0, 9, 37.0),\r\n//   createData('Oreo', 437, 18.0, 63, 4.0),\r\n// ]\r\n\r\n// function descendingComparator(a, b, orderBy) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1\r\n//   }\r\n//   return 0\r\n// }\r\n\r\n// function getComparator(order, orderBy) {\r\n//   return order === 'desc'\r\n//     ? (a, b) => descendingComparator(a, b, orderBy)\r\n//     : (a, b) => -descendingComparator(a, b, orderBy)\r\n// }\r\n\r\n// function stableSort(array, comparator) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index])\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = comparator(a[0], b[0])\r\n//     if (order !== 0) return order\r\n//     return a[1] - b[1]\r\n//   })\r\n//   return stabilizedThis.map((el) => el[0])\r\n// }\r\n\r\n// const headCells = [\r\n//   { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\r\n//   { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\r\n//   { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\r\n//   { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\r\n//   { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\r\n// ]\r\n\r\n// function EnhancedTableHead(props) {\r\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props\r\n//   const createSortHandler = (property) => (event) => {\r\n//     onRequestSort(event, property)\r\n//   }\r\n\r\n//   return (\r\n//     <TableHead>\r\n//       <TableRow>\r\n//         <TableCell padding=\"checkbox\">\r\n//           <Checkbox\r\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//             checked={rowCount > 0 && numSelected === rowCount}\r\n//             onChange={onSelectAllClick}\r\n//             inputProps={{ 'aria-label': 'select all desserts' }}\r\n//           />\r\n//         </TableCell>\r\n//         {headCells.map((headCell) => (\r\n//           <TableCell\r\n//             key={headCell.id}\r\n//             align={headCell.numeric ? 'right' : 'left'}\r\n//             padding={headCell.disablePadding ? 'none' : 'default'}\r\n//             sortDirection={orderBy === headCell.id ? order : false}\r\n//           >\r\n//             <TableSortLabel\r\n//               active={orderBy === headCell.id}\r\n//               direction={orderBy === headCell.id ? order : 'asc'}\r\n//               onClick={createSortHandler(headCell.id)}\r\n//             >\r\n//               {headCell.label}\r\n//               {orderBy === headCell.id ? (\r\n//                 <span className={classes.visuallyHidden}>\r\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n//                 </span>\r\n//               ) : null}\r\n//             </TableSortLabel>\r\n//           </TableCell>\r\n//         ))}\r\n//       </TableRow>\r\n//     </TableHead>\r\n//   )\r\n// }\r\n\r\n// EnhancedTableHead.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   onRequestSort: PropTypes.func.isRequired,\r\n//   onSelectAllClick: PropTypes.func.isRequired,\r\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n//   orderBy: PropTypes.string.isRequired,\r\n//   rowCount: PropTypes.number.isRequired,\r\n// }\r\n\r\n// const useToolbarStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     paddingLeft: theme.spacing(2),\r\n//     paddingRight: theme.spacing(1),\r\n//   },\r\n//   highlight:\r\n//     theme.palette.type === 'light'\r\n//       ? {\r\n//           color: theme.palette.secondary.main,\r\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n//         }\r\n//       : {\r\n//           color: theme.palette.text.primary,\r\n//           backgroundColor: theme.palette.secondary.dark,\r\n//         },\r\n//   title: {\r\n//     flex: '1 1 100%',\r\n//   },\r\n// }))\r\n\r\n// const EnhancedTableToolbar = (props) => {\r\n//   const classes = useToolbarStyles()\r\n//   const { numSelected } = props\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       className={clsx(classes.root, {\r\n//         [classes.highlight]: numSelected > 0,\r\n//       })}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n//           Ordered\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton aria-label=\"delete\">\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton aria-label=\"filter list\">\r\n//             <FilterListIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//     </Toolbar>\r\n//   )\r\n// }\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n// }\r\n\r\nclass Orders extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      order: null,\r\n      orderBy: null,\r\n      selected: null,\r\n      page: null,\r\n      dense: null,\r\n      rowsPerPage: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    apiInterface\r\n      .getAllOrders()\r\n      .then((data) => {\r\n        console.log(data)\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }\r\n  // const classes = useStyles()\r\n  // const [order, setOrder] = React.useState('asc')\r\n  // const [orderBy, setOrderBy] = React.useState('calories')\r\n  // const [selected, setSelected] = React.useState([])\r\n  // const [page, setPage] = React.useState(0)\r\n  // const [dense, setDense] = React.useState(false)\r\n  // const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  // const handleRequestSort = (event, property) => {\r\n  //   const isAsc = orderBy === property && order === 'asc'\r\n  //   setOrder(isAsc ? 'desc' : 'asc')\r\n  //   setOrderBy(property)\r\n  // }\r\n\r\n  // const handleSelectAllClick = (event) => {\r\n  //   if (event.target.checked) {\r\n  //     const newSelecteds = rows.map((n) => n.name)\r\n  //     setSelected(newSelecteds)\r\n  //     return\r\n  //   }\r\n  //   setSelected([])\r\n  // }\r\n\r\n  // const handleClick = (event, name) => {\r\n  //   const selectedIndex = selected.indexOf(name)\r\n  //   let newSelected = []\r\n\r\n  //   if (selectedIndex === -1) {\r\n  //     newSelected = newSelected.concat(selected, name)\r\n  //   } else if (selectedIndex === 0) {\r\n  //     newSelected = newSelected.concat(selected.slice(1))\r\n  //   } else if (selectedIndex === selected.length - 1) {\r\n  //     newSelected = newSelected.concat(selected.slice(0, -1))\r\n  //   } else if (selectedIndex > 0) {\r\n  //     newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1))\r\n  //   }\r\n\r\n  //   setSelected(newSelected)\r\n  // }\r\n\r\n  // const handleChangePage = (event, newPage) => {\r\n  //   setPage(newPage)\r\n  // }\r\n\r\n  // const handleChangeRowsPerPage = (event) => {\r\n  //   setRowsPerPage(parseInt(event.target.value, 10))\r\n  //   setPage(0)\r\n  // }\r\n\r\n  // const handleChangeDense = (event) => {\r\n  //   setDense(event.target.checked)\r\n  // }\r\n\r\n  // const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <Paper className={classes.paper}>\r\n          <EnhancedTableToolbar numSelected={selected.length} />\r\n          <TableContainer>\r\n            <Table\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              size={dense ? 'small' : 'medium'}\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={handleSelectAllClick}\r\n                onRequestSort={handleRequestSort}\r\n                rowCount={rows.length}\r\n              />\r\n              <TableBody>\r\n                {stableSort(rows, getComparator(order, orderBy))\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const isItemSelected = isSelected(row.name)\r\n                    const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        onClick={(event) => handleClick(event, row.name)}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.name}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox checked={isItemSelected} inputProps={{ 'aria-labelledby': labelId }} />\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                          {row.name}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{row.calories}</TableCell>\r\n                        <TableCell align=\"right\">{row.fat}</TableCell>\r\n                        <TableCell align=\"right\">{row.carbs}</TableCell>\r\n                        <TableCell align=\"right\">{row.protein}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={rows.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n        <FormControlLabel control={<Switch checked={dense} onChange={handleChangeDense} />} label=\"Dense padding\" /> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nOrders.propTypes = {}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders)\r\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\n// import Box from '@material-ui/core/Box'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\n\nimport AppHeader from './components/AppHeader/AppHeader'\nimport Orders from './pages/Orders/Orders'\n\nfunction App() {\n  return (\n    <Container maxWidth={false} disableGutters={true}>\n      <Router>\n        <AppHeader />\n\n        {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n        <Switch>\n          <Route exact={true} path=\"/\" component={Orders} />\n        </Switch>\n      </Router>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport CreateStore from './stores/index'\r\nimport { Provider } from 'react-redux'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\r\nimport { red } from '@material-ui/core/colors'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst store = CreateStore()\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <App />\r\n      </MuiThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport AppReducer from \"./App/Reducers\";\r\n\r\nexport default () => {\r\n  const rootReducer = combineReducers({\r\n    app: AppReducer,\r\n  });\r\n\r\n  return createStore(rootReducer);\r\n};\r\n"],"sourceRoot":""}